// MPC
// Scenerio: make Crazyflie hovering
//

#include "time.h"
#include "tinympc/tinympc.h"
#include "Eigen.h"

# ifdef __cplusplus
extern "C" {
# endif // ifdef __cplusplus

// Macro variables
// #define NSTATES 12   // no. of states (error state)
// #define NINPUTS 4    // no. of controls
// These are already defined in `constants.h`
#define NHORIZON 3  // horizon steps (NHORIZON states and NHORIZON-1 controls)
#define NSIM 200     // simulation steps (fixed with reference data)

using namespace Eigen;

// Precomputed data and cache
static MatrixNf A;
static MatrixNMf B;
static MatrixMNf Kinf;
static MatrixNf Pinf;
static MatrixMf Quu_inv;
static MatrixNf AmBKt;
static MatrixNMf coeff_d2p;
static MatrixNf Q;
static MatrixMf R;

// Stretched data
static MatrixNf A_s;
static MatrixNMf B_s;
static MatrixMNf Kinf_s;
static MatrixNf Pinf_s;
static MatrixMf Quu_inv_s;
static MatrixNf AmBKt_s;
static MatrixNMf coeff_d2p_s;

static VectorNf Xhrz[NHORIZON];
static VectorMf Uhrz[NHORIZON-1]; 
static VectorMf d[NHORIZON-1];
static VectorNf p[NHORIZON];
static VectorMf YU[NHORIZON];

static VectorNf q[NHORIZON-1];
static VectorMf r[NHORIZON-1];
static VectorMf r_tilde[NHORIZON-1];

static VectorNf Xref[NSIM];
static VectorMf Uref[NSIM-1];

static MatrixMf Acu;
static VectorMf ucu;
static VectorMf lcu;

static VectorMf Qu;
static VectorMf ZU[NHORIZON-1]; 
static VectorMf ZU_new[NHORIZON-1];

static VectorNf x0 = (VectorNf() << 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0).finished();
static VectorNf xg = (VectorNf() << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0).finished();
static VectorMf ug = (VectorMf() << 0, 0, 0, 0).finished();;

static VectorNf X[NSIM];

// Create TinyMPC struct
static tiny_Model model;
static tiny_Model model_s;
static tiny_AdmmSettings stgs;
static tiny_AdmmData data;
static tiny_AdmmInfo info;
static tiny_AdmmSolution soln;
static tiny_AdmmWorkspace work;

void InitMpc() {
  /* Start MPC initialization*/
Kinf << 
-0.027228f,0.026646f,0.020343f,-0.079472f,-0.083483f,-0.030705f,-0.016110f,0.015619f,0.010260f,-0.008143f,-0.008693f,-0.007884f,
0.028938f,0.028140f,0.020343f,-0.080683f,0.087477f,0.032485f,0.017016f,0.016280f,0.010260f,-0.008096f,0.009174f,0.009615f,
0.026809f,-0.026476f,0.020343f,0.076886f,0.077029f,-0.037358f,0.015584f,-0.015407f,0.010260f,0.007630f,0.007413f,-0.014421f,
-0.028519f,-0.028309f,0.020343f,0.083269f,-0.081024f,0.035578f,-0.016489f,-0.016492f,0.010260f,0.008609f,-0.007894f,0.012690f;

Pinf << 
751.426969f,-1.897271f,0.000000f,5.804932f,462.556251f,44.418152f,162.330123f,-1.179125f,-0.000000f,0.316020f,10.281161f,6.198226f,
-1.897271f,748.543144f,0.000000f,-453.661928f,-5.817941f,-17.730924f,-1.180262f,160.512638f,0.000000f,-9.844188f,-0.317093f,-2.469794f,
0.000000f,0.000000f,2594.435776f,0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.000000f,480.998414f,-0.000000f,-0.000000f,-0.000000f,
5.804932f,-453.661928f,-0.000000f,1187.099794f,29.392140f,156.513511f,4.361449f,-250.726282f,-0.000000f,29.279209f,2.696346f,32.979341f,
462.556251f,-5.817941f,0.000000f,29.392140f,1237.955718f,391.539941f,257.833714f,-4.365826f,-0.000000f,2.695849f,34.152067f,82.515225f,
44.418152f,-17.730924f,-0.000000f,156.513511f,391.539941f,8604.915402f,42.643862f,-17.036250f,-0.000000f,20.312637f,50.798339f,841.714684f,
162.330123f,-1.180262f,0.000000f,4.361449f,257.833714f,42.643862f,80.621461f,-0.788485f,-0.000000f,0.286649f,6.212758f,7.091538f,
-1.179125f,160.512638f,0.000000f,-250.726282f,-4.365826f,-17.036250f,-0.788485f,79.367417f,0.000000f,-5.753727f,-0.287053f,-2.831118f,
-0.000000f,0.000000f,480.998414f,0.000000f,0.000000f,-0.000000f,-0.000000f,0.000000f,245.342860f,-0.000000f,-0.000000f,-0.000000f,
0.316020f,-9.844188f,-0.000000f,29.279209f,2.695849f,20.312637f,0.286649f,-5.753727f,-0.000000f,4.994161f,0.447713f,6.415178f,
10.281161f,-0.317093f,-0.000000f,2.696346f,34.152067f,50.798339f,6.212758f,-0.287053f,-0.000000f,0.447713f,5.867799f,16.044156f,
6.198226f,-2.469794f,-0.000000f,32.979341f,82.515225f,841.714684f,7.091538f,-2.831118f,-0.000000f,6.415178f,16.044156f,299.166021f;

A << 
1.000000f,0.000000f,0.000000f,0.000000f,0.000157f,0.000000f,0.004000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,1.000000f,0.000000f,-0.000157f,0.000000f,0.000000f,0.000000f,0.004000f,0.000000f,-0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.004000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.002000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.002000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.002000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.078480f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000078f,0.000000f,
0.000000f,0.000000f,0.000000f,-0.078480f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,-0.000078f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f;

B << 
-0.000000f,0.000000f,0.000000f,-0.000000f,
0.000000f,0.000000f,-0.000000f,-0.000000f,
0.000034f,0.000034f,0.000034f,0.000034f,
-0.001101f,-0.001213f,0.001103f,0.001212f,
-0.001107f,0.001217f,0.001110f,-0.001221f,
0.000079f,-0.000029f,-0.000111f,0.000061f,
-0.000029f,0.000032f,0.000029f,-0.000032f,
0.000029f,0.000032f,-0.000029f,-0.000032f,
0.016817f,0.016817f,0.016817f,0.016817f,
-1.101418f,-1.212936f,1.102651f,1.211704f,
-1.106828f,1.217114f,1.110278f,-1.220564f,
0.078991f,-0.028895f,-0.111375f,0.061279f;

Quu_inv << 
0.002492f,0.000001f,0.000044f,-0.000001f,
0.000001f,0.002486f,-0.000001f,0.000051f,
0.000044f,-0.000001f,0.002492f,0.000001f,
-0.000001f,0.000051f,0.000001f,0.002485f;

AmBKt << 
1.000000f,-0.000000f,-0.000000f,0.000010f,-0.000130f,0.000008f,-0.000003f,-0.000000f,-0.000000f,0.010105f,-0.129931f,0.007720f,
-0.000000f,1.000000f,-0.000000f,0.000127f,-0.000010f,-0.000003f,-0.000000f,-0.000003f,-0.000000f,0.126977f,-0.009915f,-0.002506f,
-0.000000f,-0.000000f,0.999997f,0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.001368f,0.000000f,-0.000000f,-0.000000f,
0.000000f,-0.000157f,-0.000000f,0.999629f,0.000027f,0.000007f,0.000001f,-0.078470f,-0.000000f,-0.371071f,0.026509f,0.007407f,
0.000157f,-0.000000f,-0.000000f,0.000027f,0.999617f,0.000023f,0.078470f,-0.000001f,-0.000000f,0.027395f,-0.383289f,0.022666f,
0.000000f,-0.000000f,-0.000000f,0.000004f,0.000011f,0.999997f,0.000000f,-0.000000f,-0.000000f,0.003665f,0.011379f,-0.002977f,
0.004000f,-0.000000f,0.000000f,0.000006f,-0.000076f,0.000005f,0.999998f,-0.000000f,0.000000f,0.005691f,-0.075970f,0.004510f,
-0.000000f,0.004000f,-0.000000f,0.000074f,-0.000006f,-0.000001f,-0.000000f,0.999998f,-0.000000f,0.073922f,-0.005550f,-0.001469f,
0.000000f,-0.000000f,0.003999f,0.000000f,0.000000f,-0.000000f,0.000000f,-0.000000f,0.999310f,0.000000f,0.000000f,-0.000000f,
0.000000f,-0.000000f,-0.000000f,0.001962f,0.000003f,0.000001f,0.000000f,-0.000077f,-0.000000f,0.962366f,0.002878f,0.000732f,
0.000000f,-0.000000f,0.000000f,0.000003f,0.001961f,0.000002f,0.000077f,-0.000000f,0.000000f,0.002944f,0.961347f,0.002261f,
0.000000f,-0.000000f,0.000000f,0.000004f,0.000011f,0.001999f,0.000000f,-0.000000f,0.000000f,0.003504f,0.011071f,0.998517f;

coeff_d2p << 
0.342968f,-0.268588f,-0.331870f,0.257490f,
-0.364412f,-0.285844f,0.360793f,0.289463f,
-0.155380f,-0.155380f,-0.155380f,-0.155380f,
1.280369f,1.037243f,-1.256586f,-1.061027f,
1.244400f,-1.024396f,-1.179091f,0.959088f,
0.022383f,-0.148400f,0.473522f,-0.347505f,
0.218013f,-0.174407f,-0.209781f,0.166175f,
-0.228635f,-0.182108f,0.225815f,0.184928f,
-0.129460f,-0.129460f,-0.129460f,-0.129460f,
2.191956f,2.373605f,-2.190250f,-2.375312f,
2.199456f,-2.383022f,-2.195271f,2.378837f,
-1.746630f,0.580460f,2.656688f,-1.490519f;

Kinf_s << 
-0.042821f,0.040612f,0.408470f,-0.174667f,-0.216654f,-0.678187f,-0.030728f,0.027547f,0.224157f,-0.018024f,-0.026832f,-0.230063f,
0.040187f,0.033975f,0.408470f,-0.105024f,0.205023f,0.679890f,0.028880f,0.020920f,0.224157f,-0.005152f,0.025783f,0.229920f,
0.032947f,-0.036668f,0.408470f,0.116754f,0.071824f,-0.683611f,0.018844f,-0.022797f,0.224157f,0.006204f,-0.002722f,-0.229530f,
-0.030312f,-0.037919f,0.408470f,0.162937f,-0.060193f,0.681907f,-0.016996f,-0.025670f,0.224157f,0.016972f,0.003771f,0.229674f;

Pinf_s << 
652.702506f,-1.817500f,0.000000f,5.507669f,453.624591f,44.319050f,160.465195f,-1.127618f,-0.000000f,0.281957f,9.740944f,6.004639f,
-1.817500f,649.772967f,0.000000f,-444.705183f,-5.517588f,-17.699083f,-1.128477f,158.629554f,0.000000f,-9.306807f,-0.282927f,-2.400606f,
0.000000f,0.000000f,2195.088444f,0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.000000f,472.547237f,-0.000000f,-0.000000f,-0.000000f,
5.507669f,-444.705183f,-0.000000f,1154.531719f,28.190789f,155.141424f,4.164202f,-245.118078f,-0.000000f,27.550131f,2.559097f,32.366251f,
453.624591f,-5.517588f,0.000000f,28.190789f,1204.876550f,388.050979f,252.199037f,-4.167592f,-0.000000f,2.557972f,32.341995f,80.923609f,
44.319050f,-17.699083f,-0.000000f,155.141424f,388.050979f,7495.641908f,42.416117f,-16.949754f,-0.000000f,20.003938f,50.020401f,827.332882f,
160.465195f,-1.128477f,0.000000f,4.164202f,252.199037f,42.416117f,75.763493f,-0.754818f,-0.000000f,0.264346f,5.881912f,6.923368f,
-1.127618f,158.629554f,0.000000f,-245.118078f,-4.167592f,-16.949754f,-0.754818f,74.504856f,0.000000f,-5.429054f,-0.264775f,-2.768605f,
-0.000000f,0.000000f,472.547237f,0.000000f,0.000000f,-0.000000f,-0.000000f,0.000000f,237.693383f,-0.000000f,-0.000000f,-0.000000f,
0.281957f,-9.306807f,-0.000000f,27.550131f,2.557972f,20.003938f,0.264346f,-5.429054f,-0.000000f,2.945739f,0.430907f,6.303596f,
9.740944f,-0.282927f,-0.000000f,2.559097f,32.341995f,50.020401f,5.881912f,-0.264775f,-0.000000f,0.430907f,3.805342f,15.759080f,
6.004639f,-2.400606f,-0.000000f,32.366251f,80.923609f,827.332882f,6.923368f,-2.768605f,-0.000000f,6.303596f,15.759080f,271.033578f;

A_s << 
1.000000f,0.000000f,0.000000f,0.000000f,0.098100f,0.000000f,0.100000f,0.000000f,0.000000f,0.000000f,0.001635f,0.000000f,
0.000000f,1.000000f,0.000000f,-0.098100f,0.000000f,0.000000f,0.000000f,0.100000f,0.000000f,-0.001635f,0.000000f,0.000000f,
0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.100000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.050000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.050000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.050000f,
0.000000f,0.000000f,0.000000f,0.000000f,1.962000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,0.049050f,0.000000f,
0.000000f,0.000000f,0.000000f,-1.962000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,-0.049050f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1.000000f;

B_s << 
-0.011310f,0.012437f,0.011346f,-0.012473f,
0.011255f,0.012395f,-0.011268f,-0.012382f,
0.021021f,0.021021f,0.021021f,0.021021f,
-0.688387f,-0.758085f,0.689157f,0.757315f,
-0.691768f,0.760696f,0.693924f,-0.762852f,
0.049369f,-0.018059f,-0.069609f,0.038299f,
-0.452416f,0.497495f,0.453826f,-0.498905f,
0.450205f,0.495788f,-0.450708f,-0.495284f,
0.420429f,0.420429f,0.420429f,0.420429f,
-27.535461f,-30.323404f,27.566264f,30.292601f,
-27.670702f,30.427842f,27.756950f,-30.514090f,
1.974771f,-0.722364f,-2.784376f,1.531969f;

Quu_inv_s << 
0.000866f,-0.000001f,0.000805f,-0.000002f,
-0.000001f,0.000861f,-0.000000f,0.000809f,
0.000805f,-0.000000f,0.000862f,0.000001f,
-0.000002f,0.000809f,0.000001f,0.000859f;

AmBKt_s << 
0.998264f,-0.000020f,0.000000f,0.001238f,-0.106179f,0.006294f,-0.069441f,-0.000810f,0.000000f,0.049529f,-4.247148f,0.251765f,
-0.000020f,0.998239f,0.000000f,0.107699f,-0.001232f,-0.002492f,-0.000806f,-0.070435f,0.000000f,4.307965f,-0.049290f,-0.099664f,
0.000000f,-0.000000f,0.965654f,-0.000000f,0.000000f,-0.000000f,0.000000f,-0.000000f,-0.686929f,-0.000000f,0.000000f,-0.000000f,
0.000038f,-0.091499f,0.000000f,0.596289f,0.002341f,0.008613f,0.001531f,-1.697973f,0.000000f,-16.148460f,0.093659f,0.344533f,
0.091534f,-0.000039f,-0.000000f,0.002371f,0.598407f,0.021704f,1.699358f,-0.001551f,-0.000000f,0.094849f,-16.063737f,0.868142f,
0.000135f,-0.000053f,-0.000000f,0.003256f,0.008231f,0.972058f,0.005383f,-0.002130f,-0.000000f,0.130256f,0.329243f,-1.117699f,
0.098867f,-0.000010f,-0.000000f,0.000625f,-0.069268f,0.004001f,0.954699f,-0.000409f,-0.000000f,0.025017f,-2.770721f,0.160051f,
-0.000010f,0.098856f,-0.000000f,0.069973f,-0.000621f,-0.001586f,-0.000406f,0.954238f,-0.000000f,2.798902f,-0.024833f,-0.063436f,
-0.000000f,-0.000000f,0.081152f,0.000000f,-0.000000f,-0.000000f,-0.000000f,-0.000000f,0.623032f,0.000000f,-0.000000f,-0.000000f,
0.000002f,-0.001088f,0.000000f,0.016558f,0.000093f,0.000579f,0.000061f,-0.027179f,0.000000f,-0.337672f,0.003701f,0.023145f,
0.001089f,-0.000002f,-0.000000f,0.000095f,0.016591f,0.001456f,0.027200f,-0.000062f,-0.000000f,0.003790f,-0.336363f,0.058256f,
0.000007f,-0.000003f,-0.000000f,0.000173f,0.000434f,0.040736f,0.000284f,-0.000113f,-0.000000f,0.006910f,0.017376f,0.629457f;

coeff_d2p_s << 
0.000000f,0.000000f,-0.000000f,-0.000000f,
0.000000f,0.000000f,-0.000000f,-0.000000f,
-0.000000f,-0.000000f,-0.000000f,0.000000f,
-0.000000f,-0.000000f,-0.000000f,0.000000f,
-0.000000f,0.000000f,-0.000000f,-0.000000f,
0.000000f,0.000000f,-0.000000f,-0.000000f,
-0.000000f,0.000000f,0.000000f,-0.000000f,
0.000000f,0.000000f,0.000000f,-0.000000f,
-0.000000f,0.000000f,-0.000000f,-0.000000f,
0.000000f,0.000000f,0.000000f,-0.000000f,
0.000000f,0.000000f,0.000000f,-0.000000f,
0.000000f,0.000000f,-0.000000f,-0.000000f;

Q << 
100.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,100.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,400.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,4.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,4.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,1111.111111f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,4.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,4.000000f,0.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,4.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,2.040816f,0.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,2.040816f,0.000000f,
0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,0.000000f,25.000000f;

R << 
144.000000f,0.000000f,0.000000f,0.000000f,
0.000000f,144.000000f,0.000000f,0.000000f,
0.000000f,0.000000f,144.000000f,0.000000f,
0.000000f,0.000000f,0.000000f,144.000000f;

  tiny_InitModel(&model, NSTATES, NINPUTS, NHORIZON, 0, 0, 0.02, &A, &B, 0);
  tiny_InitSettings(&stgs);
  stgs.rho_init = 250.0;  // Important (select offline, associated with precomp.)
  tiny_InitWorkspace(&work, &info, &model, &data, &soln, &stgs);
  
  // Fill in the remaining struct 
  tiny_InitWorkspaceTemp(&work, &Qu, ZU, ZU_new, 0, 0);
  tiny_InitPrimalCache(&work, &Quu_inv, &AmBKt, &coeff_d2p);
  tiny_InitSolution(&work, Xhrz, Uhrz, 0, YU, 0, &Kinf, d, &Pinf, p);

  // Stretched model 
  tiny_InitModel(&model_s, NSTATES, NINPUTS, NHORIZON, 0, 0, 0.1, &A_s, &B_s, 0);
  data.model_s = &model_s;
  tiny_InitPrimalCacheStretch(&work, &Quu_inv_s, &AmBKt_s, &coeff_d2p_s);
  tiny_InitSolutionStretch(&work, &Kinf_s, &Pinf_s);
  stgs.adaptive_horizon = 1;

  tiny_SetInitialState(&work, &x0);  
  tiny_SetGoalState(&work, Xref, &xg);
  tiny_SetGoalInput(&work, Uref, &ug);

  /* Set up LQR cost */
  tiny_InitDataCost(&work, &Q, q, &R, r, r_tilde);

  // /* Set up constraints */
  tiny_SetInputBound(&work, &Acu, &lcu, &ucu);
  ucu.fill(0.5);
  lcu.fill(-0.5);
  printf("Is constrained? %d\n", IsConstrained(&work));
  tiny_UpdateLinearCost(&work);

  /* Solver settings */
  stgs.max_iter = 5;           // limit this if needed
  stgs.verbose = 0;
  stgs.check_termination = 1;
  stgs.tol_abs_dual = 5e-2;
  stgs.tol_abs_prim = 5e-2;

  // Absolute formulation:
  // Warm-starting since horizon data is reused
  // Stop earlier as horizon exceeds the end
  X[0] = x0;  
  srand(1);  // random seed

  /* End of MPC initialization*/
}

int main() {

  InitMpc();

  /* Start MPC loop */

  if (0) {
    printf("\nHOVERING QUADROTOR\n");
    printf("\nProblem Info: \n");
    PrintMatrix(work.data->model->A[0]);
    PrintMatrix(work.data->model->B[0]);
    PrintMatrix((*(work.data->Q)));
    PrintMatrix((*(work.data->R)));
    PrintMatrixT((*(work.data->x0)));
    PrintMatrixT(work.data->Xref[0]);
    PrintMatrixT(work.data->Uref[0]);
    PrintMatrixT(work.data->q[0]);
    PrintMatrixT(work.data->r[0]);
  }

  printf("\n*** Start MPC loop ***\n");
  for (int k = 0; k < NSIM - NHORIZON - 1; ++k) {
    MatrixXf pose = X[k](seq(0,5));
    MatrixXf pose_ref = Xref[0](seq(0,5));
    printf("ex[%d] =  %.4f\n", k, (pose - pose_ref).norm());

    // Inject noise into measurement
    for (int j = 0; j < NSTATES; ++j) {
      X[k](j) += X[k](j) * T_NOISE(1);
    }

    clock_t start, end;
    double cpu_time_used;
    start = clock();

    work.data->x0 = &(X[k]); // update current measurement
    // PrintMatrixT(*(work.data->x0));
    // Warm-start by previous solution
    // tiny_ShiftFill(Uhrz, T_ARRAY_SIZE(Uhrz));

    // Solve optimization problem using Augmented Lagrangian TVLQR
    tiny_SolveAdmm(&work);

    end = clock();
    cpu_time_used = ((double)(end - start)) * 1000 / CLOCKS_PER_SEC;  // ms
    // printf("solve time:        %f\n", cpu_time_used);
    // printf("%f\n", cpu_time_used);

    // if(work.info->status_val != TINY_SOLVED) {
    //   printf("!!! STOP AS SOLVER FAILED !!!\n");
    //   return 0;
    // }

    // PrintMatrixT(Uhrz[0]);

    // PrintMatrixT(pose);
    // PrintMatrixT(work.data->Xref[0]);

    // === 2. Simulate dynamics using the first control solution ===
    // tiny_Clamp(ZU_new[0].data, umin[0], umax[0], NINPUTS);
    // If no constraints, use Uhrz[0]
    tiny_EvalModel(&X[k + 1], &X[k], ZU_new, &model, 0);
  }

  return 0;
}

# ifdef __cplusplus
}
# endif // ifdef __cplusplus